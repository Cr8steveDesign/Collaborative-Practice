#include "shell.h"

/**
 * main - Simple shell entry point
 * @argc: Argument counter
 * @argv: Argument Vector
 *
 */

int main(int argc, char **argv)
{

	int mode = isatty(0);
	char *buffer = NULL, cmdc;
	size_t buff_Size = 0;
	ssize_t num = 0;
	pid_t pid_num;
	int status, count = 0;
	char **args = NULL;

	(void)argc;

	while (1)
	{
		count++;
		if (mode == 1) /*Prints prompt in interactive mode*/
			write(1, "$ ", 2);

		num = getline(&buffer, &buff_Size, stdin);
		if (num == -1)
		{
			if (mode == 1)
				free(args);
			free(buffer);
			exit(ENOMEM);
		}

		args = tokenizah(buffer); /*dynamically allocated*/
		if (args[0] == NULL)
		{
			free(args);
			continue;
		}

		if (access(args[0], X_OK) == -1)
		{
			cmdc = (count + '0');
			zerror(argv[0], cmdc, args[0]);
			continue;
		}
		pid_num = fork();

		if (pid_num < 0)
		{
			perror(argv[0]);
			exit(-1);
		}
		else if (pid_num == 0)
		{
			execve(buffer, args, environ);
			perror(argv[0]);
			exit(2);
		}
		else
		{
			wait(&status);
			errno = status;
			free(args);
		}
	}

	return (errno);
}
